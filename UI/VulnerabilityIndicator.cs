using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
public class VulnerabilityIndicator : MonoBehaviour {
    public CyberNodeIndicator indicator;
    public Image vulnerabilityIndicator;
    private bool showVulnerabilityIndicator;
    private float vulnerabilityIndicatorTimer;
    public float zoomTime;
    public Color colorMain;
    public Color colorFlash;

    void Start() {
        indicator.onMouseOver += HandleMouseOver;
        indicator.onMouseExit += HandleMouseExit;
    }
    void OnDestroy() {
        indicator.onMouseOver -= HandleMouseOver;
        indicator.onMouseExit -= HandleMouseExit;
    }
    public void HandleMouseOver(NodeIndicator<CyberNode, CyberGraph> indicator) {
        if (GameManager.I.IsCyberNodeVulnerable(indicator.node))
            StartIndicator();
    }
    public void HandleMouseExit(NodeIndicator<CyberNode, CyberGraph> indicator) {
        StopIndicator();
    }
    public void StartIndicator() {
        showVulnerabilityIndicator = true;
        vulnerabilityIndicatorTimer = 0;
    }
    public void StopIndicator() {
        showVulnerabilityIndicator = false;
    }
    public bool IsVisible() {
        return showVulnerabilityIndicator;
    }

    void Update() {
        if (showVulnerabilityIndicator) {
            vulnerabilityIndicator.enabled = true;
            vulnerabilityIndicatorTimer += Time.fixedDeltaTime;
            UpdateIndicatorSize(vulnerabilityIndicatorTimer);
        } else {
            vulnerabilityIndicator.enabled = false;
            vulnerabilityIndicatorTimer = 0;
        }
    }

    void UpdateIndicatorSize(float time) {
        if (time < 0.5) {
            vulnerabilityIndicator.rectTransform.sizeDelta = new Vector2(50f, 50f);
        } else if (time < 1) {
            vulnerabilityIndicator.rectTransform.sizeDelta = new Vector2(35f, 35f);
        } else {
            vulnerabilityIndicator.rectTransform.sizeDelta = new Vector2(25f, 25f);
        }
    }
}
